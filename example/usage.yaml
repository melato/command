short: command example
long: |
  Provides an example of a command-line application,
  using examples from the Go library.
  It demonstrates how to use:
  - scalar flag types: string, int, float64, bool
  - automatic conversion of string arguments to run method parameters
  - subcommands (command hierarchy)
  - run methods with variable number of arguments
  - command help

  Only the main package depends on the command package.
  The code that implements the actual commands is in ./cli/
  Run as follows:
  - go run command-example.go ...
  - go install command-example.go
examples:
  - -h
  - format time -n > version  
  - "string -sep : split $PATH"
  - string join a b c
commands:
  add:
    short: add two numbers
    use: <number1> <number2>
  format:
    short: test a few Go formatting utilities
    commands:
      float:
        short: format float values
        use: "[float-value]..."
        examples:
        - format float -f %g
        - format float -f %g 0.3
      time:
        short: format the current time
  string:
    short: string argument examples
    commands:
      join:
        short: call strings.Join
        use: "[arg]..."
      split:
        short: call strings.Split
        use: "[arg]"
      sprintf:
        short: call fmt.Sprintf
        use: <format> [arg]...
        long: |
          The arguments are all strings, therefore you can only use a format that expects string arguments.
        examples:
        - 'string sprintf "%-5s %5s" a b'
  regexp:
    short: regexp examples
    examples:
    - "regexp -r '([0-9]+):([0-9]+)' submatch 12:05"
    commands:
      split:
        short: regexp.Regexp.Split
      find:
        short: regexp.Regexp.FindAllString
      submatch:
        short: regexp.Regexp.FindStringSubmatch
      
  version:
    short: print version
        